use crate::v2_1::datatypes::{AddressType, CustomDataType};
use crate::v2_1::enumerations::PaymentStatusEnumType;
use chrono::{DateTime, Utc};
use rust_decimal::Decimal;
use serde::{Deserialize, Serialize};
use validator::Validate;

/// Request body for the NotifySettlement request.
#[derive(Debug, Clone, PartialEq, Deserialize, Serialize, Validate)]
#[serde(rename_all = "camelCase")]
pub struct NotifySettlementRequest {
    /// The _transactionId_ that the settlement belongs to. Can be empty if the payment transaction is canceled prior to the start of the OCPP transaction.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(length(max = 36))]
    pub transaction_id: Option<String>,

    /// The payment reference received from the payment terminal and is used as the value for _idToken_.
    #[validate(length(max = 255))]
    pub psp_ref: String,

    pub status: PaymentStatusEnumType,

    /// Additional information from payment terminal/payment process.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(length(max = 500))]
    pub status_info: Option<String>,

    /// The amount that was settled, or attempted to be settled (in case of failure).
    pub settlement_amount: Decimal,

    /// The time when the settlement was done.
    pub settlement_time: DateTime<Utc>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(length(max = 50))]
    pub receipt_id: Option<String>,

    /// The receipt URL, to be used if the receipt is generated by the payment terminal or the CS.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(length(max = 2000))]
    pub receipt_url: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(nested)]
    pub vat_company: Option<AddressType>,

    /// VAT number for a company receipt.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(length(max = 20))]
    pub vat_number: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(nested)]
    pub custom_data: Option<CustomDataType>,
}

impl NotifySettlementRequest {
    /// Creates a new instance of the struct.
    ///
    /// * `psp_ref` - The payment reference received from the payment terminal and is used as the value for _idToken_.
    /// * `status` - The status field
    /// * `settlement_amount` - The amount that was settled, or attempted to be settled (in case of failure).
    /// * `settlement_time` - The time when the settlement was done.
    ///
    /// # Returns
    ///
    /// A new instance of the struct with required fields set and optional fields as None.
    pub fn new(psp_ref: String, status: PaymentStatusEnumType, settlement_amount: Decimal, settlement_time: DateTime<Utc>) -> Self {
        Self {
            transaction_id: None,
            psp_ref,
            status,
            status_info: None,
            settlement_amount,
            settlement_time,
            receipt_id: None,
            receipt_url: None,
            vat_company: None,
            vat_number: None,
            custom_data: None,
        }
    }

    /// Sets the transaction_id field.
    ///
    /// * `transaction_id` - The _transactionId_ that the settlement belongs to. Can be empty if the payment transaction is canceled prior to the start of the OCPP transaction.
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_transaction_id(&mut self, transaction_id: Option<String>) -> &mut Self {
        self.transaction_id = transaction_id;
        self
    }

    /// Sets the psp_ref field.
    ///
    /// * `psp_ref` - The payment reference received from the payment terminal and is used as the value for _idToken_.
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_psp_ref(&mut self, psp_ref: String) -> &mut Self {
        self.psp_ref = psp_ref;
        self
    }

    /// Sets the status field.
    ///
    /// * `status` - The status field
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_status(&mut self, status: PaymentStatusEnumType) -> &mut Self {
        self.status = status;
        self
    }

    /// Sets the status_info field.
    ///
    /// * `status_info` - Additional information from payment terminal/payment process.
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_status_info(&mut self, status_info: Option<String>) -> &mut Self {
        self.status_info = status_info;
        self
    }

    /// Sets the settlement_amount field.
    ///
    /// * `settlement_amount` - The amount that was settled, or attempted to be settled (in case of failure).
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_settlement_amount(&mut self, settlement_amount: Decimal) -> &mut Self {
        self.settlement_amount = settlement_amount;
        self
    }

    /// Sets the settlement_time field.
    ///
    /// * `settlement_time` - The time when the settlement was done.
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_settlement_time(&mut self, settlement_time: DateTime<Utc>) -> &mut Self {
        self.settlement_time = settlement_time;
        self
    }

    /// Sets the receipt_id field.
    ///
    /// * `receipt_id` - The receipt_id field
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_receipt_id(&mut self, receipt_id: Option<String>) -> &mut Self {
        self.receipt_id = receipt_id;
        self
    }

    /// Sets the receipt_url field.
    ///
    /// * `receipt_url` - The receipt URL, to be used if the receipt is generated by the payment terminal or the CS.
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_receipt_url(&mut self, receipt_url: Option<String>) -> &mut Self {
        self.receipt_url = receipt_url;
        self
    }

    /// Sets the vat_company field.
    ///
    /// * `vat_company` - The vat_company field
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_vat_company(&mut self, vat_company: Option<AddressType>) -> &mut Self {
        self.vat_company = vat_company;
        self
    }

    /// Sets the vat_number field.
    ///
    /// * `vat_number` - VAT number for a company receipt.
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_vat_number(&mut self, vat_number: Option<String>) -> &mut Self {
        self.vat_number = vat_number;
        self
    }

    /// Sets the custom_data field.
    ///
    /// * `custom_data` - The custom_data field
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_custom_data(&mut self, custom_data: Option<CustomDataType>) -> &mut Self {
        self.custom_data = custom_data;
        self
    }

    /// Gets a reference to the transaction_id field.
    ///
    /// # Returns
    ///
    /// The _transactionId_ that the settlement belongs to. Can be empty if the payment transaction is canceled prior to the start of the OCPP transaction.
    pub fn get_transaction_id(&self) -> Option<&String> {
        self.transaction_id.as_ref()
    }

    /// Gets a reference to the psp_ref field.
    ///
    /// # Returns
    ///
    /// The payment reference received from the payment terminal and is used as the value for _idToken_.
    pub fn get_psp_ref(&self) -> &String {
        &self.psp_ref
    }

    /// Gets a reference to the status field.
    ///
    /// # Returns
    ///
    /// The status field
    pub fn get_status(&self) -> &PaymentStatusEnumType {
        &self.status
    }

    /// Gets a reference to the status_info field.
    ///
    /// # Returns
    ///
    /// Additional information from payment terminal/payment process.
    pub fn get_status_info(&self) -> Option<&String> {
        self.status_info.as_ref()
    }

    /// Gets a reference to the settlement_amount field.
    ///
    /// # Returns
    ///
    /// The amount that was settled, or attempted to be settled (in case of failure).
    pub fn get_settlement_amount(&self) -> &Decimal {
        &self.settlement_amount
    }

    /// Gets a reference to the settlement_time field.
    ///
    /// # Returns
    ///
    /// The time when the settlement was done.
    pub fn get_settlement_time(&self) -> &DateTime<Utc> {
        &self.settlement_time
    }

    /// Gets a reference to the receipt_id field.
    ///
    /// # Returns
    ///
    /// The receipt_id field
    pub fn get_receipt_id(&self) -> Option<&String> {
        self.receipt_id.as_ref()
    }

    /// Gets a reference to the receipt_url field.
    ///
    /// # Returns
    ///
    /// The receipt URL, to be used if the receipt is generated by the payment terminal or the CS.
    pub fn get_receipt_url(&self) -> Option<&String> {
        self.receipt_url.as_ref()
    }

    /// Gets a reference to the vat_company field.
    ///
    /// # Returns
    ///
    /// The vat_company field
    pub fn get_vat_company(&self) -> Option<&AddressType> {
        self.vat_company.as_ref()
    }

    /// Gets a reference to the vat_number field.
    ///
    /// # Returns
    ///
    /// VAT number for a company receipt.
    pub fn get_vat_number(&self) -> Option<&String> {
        self.vat_number.as_ref()
    }

    /// Gets a reference to the custom_data field.
    ///
    /// # Returns
    ///
    /// The custom_data field
    pub fn get_custom_data(&self) -> Option<&CustomDataType> {
        self.custom_data.as_ref()
    }

    /// Sets the transaction_id field and returns self for builder pattern.
    ///
    /// * `transaction_id` - The _transactionId_ that the settlement belongs to. Can be empty if the payment transaction is canceled prior to the start of the OCPP transaction.
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_transaction_id(mut self, transaction_id: String) -> Self {
        self.transaction_id = Some(transaction_id);
        self
    }

    /// Sets the status_info field and returns self for builder pattern.
    ///
    /// * `status_info` - Additional information from payment terminal/payment process.
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_status_info(mut self, status_info: String) -> Self {
        self.status_info = Some(status_info);
        self
    }

    /// Sets the receipt_id field and returns self for builder pattern.
    ///
    /// * `receipt_id` - The receipt_id field
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_receipt_id(mut self, receipt_id: String) -> Self {
        self.receipt_id = Some(receipt_id);
        self
    }

    /// Sets the receipt_url field and returns self for builder pattern.
    ///
    /// * `receipt_url` - The receipt URL, to be used if the receipt is generated by the payment terminal or the CS.
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_receipt_url(mut self, receipt_url: String) -> Self {
        self.receipt_url = Some(receipt_url);
        self
    }

    /// Sets the vat_company field and returns self for builder pattern.
    ///
    /// * `vat_company` - The vat_company field
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_vat_company(mut self, vat_company: AddressType) -> Self {
        self.vat_company = Some(vat_company);
        self
    }

    /// Sets the vat_number field and returns self for builder pattern.
    ///
    /// * `vat_number` - VAT number for a company receipt.
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_vat_number(mut self, vat_number: String) -> Self {
        self.vat_number = Some(vat_number);
        self
    }

    /// Sets the custom_data field and returns self for builder pattern.
    ///
    /// * `custom_data` - The custom_data field
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_custom_data(mut self, custom_data: CustomDataType) -> Self {
        self.custom_data = Some(custom_data);
        self
    }

}

/// Response body for the NotifySettlement response.
#[derive(Debug, Clone, PartialEq, Deserialize, Serialize, Validate)]
#[serde(rename_all = "camelCase")]
pub struct NotifySettlementResponse {
    /// The receipt URL if receipt generated by CSMS. The Charging Station can QR encode it and show it to the EV Driver.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(length(max = 2000))]
    pub receipt_url: Option<String>,

    /// The receipt id if the receipt is generated by CSMS.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(length(max = 50))]
    pub receipt_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(nested)]
    pub custom_data: Option<CustomDataType>,
}

impl NotifySettlementResponse {
    /// Creates a new instance of the struct.
    ///
    ///
    /// # Returns
    ///
    /// A new instance of the struct with required fields set and optional fields as None.
    pub fn new() -> Self {
        Self {
            receipt_url: None,
            receipt_id: None,
            custom_data: None,
        }
    }

    /// Sets the receipt_url field.
    ///
    /// * `receipt_url` - The receipt URL if receipt generated by CSMS. The Charging Station can QR encode it and show it to the EV Driver.
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_receipt_url(&mut self, receipt_url: Option<String>) -> &mut Self {
        self.receipt_url = receipt_url;
        self
    }

    /// Sets the receipt_id field.
    ///
    /// * `receipt_id` - The receipt id if the receipt is generated by CSMS.
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_receipt_id(&mut self, receipt_id: Option<String>) -> &mut Self {
        self.receipt_id = receipt_id;
        self
    }

    /// Sets the custom_data field.
    ///
    /// * `custom_data` - The custom_data field
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_custom_data(&mut self, custom_data: Option<CustomDataType>) -> &mut Self {
        self.custom_data = custom_data;
        self
    }

    /// Gets a reference to the receipt_url field.
    ///
    /// # Returns
    ///
    /// The receipt URL if receipt generated by CSMS. The Charging Station can QR encode it and show it to the EV Driver.
    pub fn get_receipt_url(&self) -> Option<&String> {
        self.receipt_url.as_ref()
    }

    /// Gets a reference to the receipt_id field.
    ///
    /// # Returns
    ///
    /// The receipt id if the receipt is generated by CSMS.
    pub fn get_receipt_id(&self) -> Option<&String> {
        self.receipt_id.as_ref()
    }

    /// Gets a reference to the custom_data field.
    ///
    /// # Returns
    ///
    /// The custom_data field
    pub fn get_custom_data(&self) -> Option<&CustomDataType> {
        self.custom_data.as_ref()
    }

    /// Sets the receipt_url field and returns self for builder pattern.
    ///
    /// * `receipt_url` - The receipt URL if receipt generated by CSMS. The Charging Station can QR encode it and show it to the EV Driver.
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_receipt_url(mut self, receipt_url: String) -> Self {
        self.receipt_url = Some(receipt_url);
        self
    }

    /// Sets the receipt_id field and returns self for builder pattern.
    ///
    /// * `receipt_id` - The receipt id if the receipt is generated by CSMS.
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_receipt_id(mut self, receipt_id: String) -> Self {
        self.receipt_id = Some(receipt_id);
        self
    }

    /// Sets the custom_data field and returns self for builder pattern.
    ///
    /// * `custom_data` - The custom_data field
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_custom_data(mut self, custom_data: CustomDataType) -> Self {
        self.custom_data = Some(custom_data);
        self
    }

}

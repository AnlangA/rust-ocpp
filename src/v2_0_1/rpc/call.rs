use std::{fmt, str::FromStr};

use enum_as_inner::EnumAsInner;
use serde_json::Value;

use crate::v2_0_1::core::messages::{
    authorize::{AuthorizeRequest, AuthorizeResponse},
    boot_notification::{BootNotificationRequest, BootNotificationResponse},
    cancel_reservation::{CancelReservationRequest, CancelReservationResponse},
    certificate_signed::{CertificateSignedRequest, CertificateSignedResponse},
    change_availability::{ChangeAvailabilityRequest, ChangeAvailabilityResponse},
    clear_cache::{ClearCacheRequest, ClearCacheResponse},
    clear_charging_profile::{ClearChargingProfileRequest, ClearChargingProfileResponse},
    clear_display_message::{ClearDisplayMessageRequest, ClearDisplayMessageResponse},
    clear_variable_monitoring::{ClearVariableMonitoringRequest, ClearVariableMonitoringResponse},
    cleared_charging_limit::{ClearedChargingLimitRequest, ClearedChargingLimitResponse},
    cost_updated::{CostUpdatedRequest, CostUpdatedResponse},
    customer_information::{CustomerInformationRequest, CustomerInformationResponse},
    datatransfer::{DataTransferRequest, DataTransferResponse},
    delete_certificate::{DeleteCertificateRequest, DeleteCertificateResponse},
    firmware_status_notification::FirmwareStatusNotificationRequest,
    get_15118ev_certificate::{Get15118EVCertificateRequest, Get15118EVCertificateResponse},
    get_base_report::{GetBaseReportRequest, GetBaseReportResponse},
    get_certificate_status::{GetCertificateStatusRequest, GetCertificateStatusResponse},
    get_charging_profile::{GetChargingProfilesRequest, GetChargingProfilesResponse},
    get_composite_schedule::{GetCompositeScheduleRequest, GetCompositeScheduleResponse},
    get_display_message::{GetDisplayMessagesRequest, GetDisplayMessagesResponse},
    get_installed_certificate_ids::{
        GetInstalledCertificateIdsRequest, GetInstalledCertificateIdsResponse,
    },
    get_local_list_version::{GetLocalListVersionRequest, GetLocalListVersionResponse},
    get_log::{GetLogRequest, GetLogResponse},
    get_monitoring_report::{GetMonitoringReportRequest, GetMonitoringReportResponse},
    get_report::{GetReportRequest, GetReportResponse},
    get_transaction_status::{GetTransactionStatusRequest, GetTransactionStatusResponse},
    get_variables::{GetVariablesRequest, GetVariablesResponse},
    heartbeat::{HeartbeatRequest, HeartbeatResponse},
    install_certificate::{InstallCertificateRequest, InstallCertificateResponse},
    log_status_notification::{LogStatusNotificationRequest, LogStatusNotificationResponse},
    meter_values::{MeterValuesRequest, MeterValuesResponse},
    notify_charging_limit::{NotifyChargingLimitRequest, NotifyChargingLimitResponse},
    notify_customer_information::{
        NotifyCustomerInformationRequest, NotifyCustomerInformationResponse,
    },
    notify_display_messages::{NotifyDisplayMessagesRequest, NotifyDisplayMessagesResponse},
    notify_ev_charging_needs::{NotifyEVChargingNeedsRequest, NotifyEVChargingNeedsResponse},
    notify_ev_charging_schedule::{
        NotifyEVChargingScheduleRequest, NotifyEVChargingScheduleResponse,
    },
    notify_event::{NotifyEventRequest, NotifyEventResponse},
    notify_monitoring_report::{NotifyMonitoringReportRequest, NotifyMonitoringReportResponse},
    notify_report::{NotifyReportRequest, NotifyReportResponse},
    publish_firmware::{PublishFirmwareRequest, PublishFirmwareResponse},
    publish_firmware_status_notification::{
        PublishFirmwareStatusNotificationRequest, PublishFirmwareStatusNotificationResponse,
    },
    report_charging_profiles::{ReportChargingProfilesRequest, ReportChargingProfilesResponse},
    request_start_transaction::{RequestStartTransactionRequest, RequestStartTransactionResponse},
    request_stop_transaction::{RequestStopTransactionRequest, RequestStopTransactionResponse},
    reservation_status_update::{ReservationStatusUpdateRequest, ReservationStatusUpdateResponse},
    reserve_now::{ReserveNowRequest, ReserveNowResponse},
    reset::{ResetRequest, ResetResponse},
    security_event_notification::{
        SecurityEventNotificationRequest, SecurityEventNotificationResponse,
    },
    send_local_list::{SendLocalListRequest, SendLocalListResponse},
    set_charging_profile::{SetChargingProfileRequest, SetChargingProfileResponse},
    set_display_message::{SetDisplayMessageRequest, SetDisplayMessageResponse},
    set_monitoring_base::{SetMonitoringBaseRequest, SetMonitoringBaseResponse},
    set_monitoring_level::{SetMonitoringLevelRequest, SetMonitoringLevelResponse},
    set_network_profile::{SetNetworkProfileRequest, SetNetworkProfileResponse},
    set_variable_monitoring::{SetVariableMonitoringRequest, SetVariableMonitoringResponse},
    set_variables::{SetVariablesRequest, SetVariablesResponse},
    sign_certificate::{SignCertificateRequest, SignCertificateResponse},
    status_notification::{StatusNotificationRequest, StatusNotificationResponse},
    transaction_event::{TransactionEventRequest, TransactionEventResponse},
    trigger_message::{TriggerMessageRequest, TriggerMessageResponse},
    unlock_connector::{UnlockConnectorRequest, UnlockConnectorResponse},
    unpublish_firmware::{UnpublishFirmwareRequest, UnpublishFirmwareResponse},
    update_firmware::{UpdateFirmwareRequest, UpdateFirmwareResponse},
};

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
pub struct Call {
    pub message_type_id: i64,
    pub message_id: String,
    pub action: CallActionTypeEnum,
    pub payload: CallPayloadTypeEnum,
}

impl Call {
    pub fn new(
        self,
        message_type_id: i64,
        message_id: String,
        action: CallActionTypeEnum,
        json: Value,
    ) -> Self {
        let payload = match action {
            CallActionTypeEnum::BootNotification => CallPayloadTypeEnum::BootNotificationRequest(
                serde_json::from_value::<BootNotificationRequest>(json).unwrap(),
            ),
            CallActionTypeEnum::Authorize => todo!(),
            CallActionTypeEnum::CancelReservation => todo!(),
            CallActionTypeEnum::CertificateSigned => todo!(),
            CallActionTypeEnum::ChangeAvailability => todo!(),
            CallActionTypeEnum::ClearCache => todo!(),
            CallActionTypeEnum::ClearChargingProfile => todo!(),
            CallActionTypeEnum::ClearDisplayMessage => todo!(),
            CallActionTypeEnum::ClearedChargingLimit => todo!(),
            CallActionTypeEnum::ClearVariableMonitoring => todo!(),
            CallActionTypeEnum::CostUpdated => todo!(),
            CallActionTypeEnum::CustomerInformation => todo!(),
            CallActionTypeEnum::Datatransfer => todo!(),
            CallActionTypeEnum::DeleteCertificate => todo!(),
            CallActionTypeEnum::FirmwareStatusNotification => todo!(),
            CallActionTypeEnum::Get15118EVCertificate => todo!(),
            CallActionTypeEnum::GetBaseReport => todo!(),
            CallActionTypeEnum::GetCertificateStatus => todo!(),
            CallActionTypeEnum::GetChargingProfile => todo!(),
            CallActionTypeEnum::GetCompositeSchedule => todo!(),
            CallActionTypeEnum::GetDisplayMessage => todo!(),
            CallActionTypeEnum::GetInstalledCertificateIds => todo!(),
            CallActionTypeEnum::GetLocalListVersion => todo!(),
            CallActionTypeEnum::GetLog => todo!(),
            CallActionTypeEnum::GetMonitoringReport => todo!(),
            CallActionTypeEnum::GetReport => todo!(),
            CallActionTypeEnum::GetTransactionStatus => todo!(),
            CallActionTypeEnum::GetVariables => todo!(),
            CallActionTypeEnum::Heartbeat => todo!(),
            CallActionTypeEnum::InstallCertificate => todo!(),
            CallActionTypeEnum::LogStatusNotification => todo!(),
            CallActionTypeEnum::MeterValues => todo!(),
            CallActionTypeEnum::NotifyChargingLimit => todo!(),
            CallActionTypeEnum::NotifyCustomerInformation => todo!(),
            CallActionTypeEnum::NotifyDisplayMessages => todo!(),
            CallActionTypeEnum::NotifyEVChargingNeeds => todo!(),
            CallActionTypeEnum::NotifyEVChargingSchedule => todo!(),
            CallActionTypeEnum::NotifyEvent => todo!(),
            CallActionTypeEnum::NotifyMonitoringReport => todo!(),
            CallActionTypeEnum::NotifyReport => todo!(),
            CallActionTypeEnum::PublishFirmware => todo!(),
            CallActionTypeEnum::PublishFirmwareStatusNotification => todo!(),
            CallActionTypeEnum::ReportChargingProfiles => todo!(),
            CallActionTypeEnum::RequestStartTransaction => todo!(),
            CallActionTypeEnum::RequestStopTransaction => todo!(),
            CallActionTypeEnum::ReservationStatusUpdate => todo!(),
            CallActionTypeEnum::ReserveNow => todo!(),
            CallActionTypeEnum::Reset => todo!(),
            CallActionTypeEnum::SecurityEventNotification => todo!(),
            CallActionTypeEnum::SendLocalList => todo!(),
            CallActionTypeEnum::SetChargingProfile => todo!(),
            CallActionTypeEnum::SetDisplayMessage => todo!(),
            CallActionTypeEnum::SetMonitoringBase => todo!(),
            CallActionTypeEnum::SetMonitoringLevel => todo!(),
            CallActionTypeEnum::SetNetworkProfile => todo!(),
            CallActionTypeEnum::SetVariableMonitoring => todo!(),
            CallActionTypeEnum::SetVariables => todo!(),
            CallActionTypeEnum::SignCertificate => todo!(),
            CallActionTypeEnum::StatusNotification => todo!(),
            CallActionTypeEnum::TransactionEvent => todo!(),
            CallActionTypeEnum::TriggerMessage => todo!(),
            CallActionTypeEnum::UnlockConnector => todo!(),
            CallActionTypeEnum::UnpublishFirmware => todo!(),
            CallActionTypeEnum::UpdateFirmware => todo!(),
        };
        Self {
            message_type_id,
            message_id,
            action,
            payload,
        }
    }
}

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
pub struct CallResult {
    pub message_type_id: i64,
    pub message_id: String,
    pub payload: String,
}

impl CallResult {
    pub fn new(message_type_id: i64, message_id: String, payload: String) -> Self {
        Self {
            message_type_id,
            message_id,
            payload,
        }
    }
}

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
pub struct CallError {
    pub message_type_id: i64,
    pub message_id: String,
    pub error_code: String,
    pub error_description: String,
    pub error_details: String,
}

impl CallError {
    pub fn new(
        message_type_id: i64,
        message_id: String,
        error_code: String,
        error_description: String,
        error_details: String,
    ) -> Self {
        Self {
            message_type_id,
            message_id,
            error_code,
            error_description,
            error_details,
        }
    }
}

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone)]
pub enum CallTypeEnum {
    Call(Call),
    CallResult(CallResult),
    CallError(CallError),
    None,
}

impl fmt::Display for CallTypeEnum {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:?}", &self)
    }
}

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq)]
pub enum CallActionTypeEnum {
    Authorize,
    BootNotification,
    CancelReservation,
    CertificateSigned,
    ChangeAvailability,
    ClearCache,
    ClearChargingProfile,
    ClearDisplayMessage,
    ClearedChargingLimit,
    ClearVariableMonitoring,
    CostUpdated,
    CustomerInformation,
    Datatransfer,
    DeleteCertificate,
    FirmwareStatusNotification,
    Get15118EVCertificate,
    GetBaseReport,
    GetCertificateStatus,
    GetChargingProfile,
    GetCompositeSchedule,
    GetDisplayMessage,
    GetInstalledCertificateIds,
    GetLocalListVersion,
    GetLog,
    GetMonitoringReport,
    GetReport,
    GetTransactionStatus,
    GetVariables,
    Heartbeat,
    InstallCertificate,
    LogStatusNotification,
    MeterValues,
    NotifyChargingLimit,
    NotifyCustomerInformation,
    NotifyDisplayMessages,
    NotifyEVChargingNeeds,
    NotifyEVChargingSchedule,
    NotifyEvent,
    NotifyMonitoringReport,
    NotifyReport,
    PublishFirmware,
    PublishFirmwareStatusNotification,
    ReportChargingProfiles,
    RequestStartTransaction,
    RequestStopTransaction,
    ReservationStatusUpdate,
    ReserveNow,
    Reset,
    SecurityEventNotification,
    SendLocalList,
    SetChargingProfile,
    SetDisplayMessage,
    SetMonitoringBase,
    SetMonitoringLevel,
    SetNetworkProfile,
    SetVariableMonitoring,
    SetVariables,
    SignCertificate,
    StatusNotification,
    TransactionEvent,
    TriggerMessage,
    UnlockConnector,
    UnpublishFirmware,
    UpdateFirmware,
}

impl fmt::Display for CallActionTypeEnum {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}

impl FromStr for CallActionTypeEnum {
    type Err = ();

    fn from_str(input: &str) -> Result<CallActionTypeEnum, Self::Err> {
        match input {
            "Authorize" => Ok(CallActionTypeEnum::Authorize),
            "BootNotification" => Ok(CallActionTypeEnum::BootNotification),
            "CancelReservation" => Ok(CallActionTypeEnum::CancelReservation),
            "CertificateSigned" => Ok(CallActionTypeEnum::CertificateSigned),
            "ChangeAvailability" => Ok(CallActionTypeEnum::ChangeAvailability),
            "ClearCache" => Ok(CallActionTypeEnum::ClearCache),
            "ClearChargingProfile" => Ok(CallActionTypeEnum::ClearChargingProfile),
            "ClearDisplayMessage" => Ok(CallActionTypeEnum::ClearDisplayMessage),
            "ClearedChargingLimit" => Ok(CallActionTypeEnum::ClearedChargingLimit),
            "ClearVariableMonitoring" => Ok(CallActionTypeEnum::ClearVariableMonitoring),
            "CostUpdated" => Ok(CallActionTypeEnum::CostUpdated),
            "CustomerInformation" => Ok(CallActionTypeEnum::CustomerInformation),
            "Datatransfer" => Ok(CallActionTypeEnum::Datatransfer),
            "DeleteCertificate" => Ok(CallActionTypeEnum::DeleteCertificate),
            "FirmwareStatusNotification" => Ok(CallActionTypeEnum::FirmwareStatusNotification),
            "Get15118EVCertificate" => Ok(CallActionTypeEnum::Get15118EVCertificate),
            "GetBaseReport" => Ok(CallActionTypeEnum::GetBaseReport),
            "GetCertificateStatus" => Ok(CallActionTypeEnum::GetCertificateStatus),
            "GetChargingProfile" => Ok(CallActionTypeEnum::GetChargingProfile),
            "GetCompositeSchedule" => Ok(CallActionTypeEnum::GetCompositeSchedule),
            "GetDisplayMessage" => Ok(CallActionTypeEnum::GetDisplayMessage),
            "GetInstalledCertificateIds" => Ok(CallActionTypeEnum::GetInstalledCertificateIds),
            "GetLocalListVersion" => Ok(CallActionTypeEnum::GetLocalListVersion),
            "GetLog" => Ok(CallActionTypeEnum::GetLog),
            "GetMonitoringReport" => Ok(CallActionTypeEnum::GetMonitoringReport),
            "GetReport" => Ok(CallActionTypeEnum::GetReport),
            "GetTransactionStatus" => Ok(CallActionTypeEnum::GetTransactionStatus),
            "GetVariables" => Ok(CallActionTypeEnum::GetVariables),
            "Heartbeat" => Ok(CallActionTypeEnum::Heartbeat),
            "InstallCertificate" => Ok(CallActionTypeEnum::InstallCertificate),
            "LogStatusNotification" => Ok(CallActionTypeEnum::LogStatusNotification),
            "MeterValues" => Ok(CallActionTypeEnum::MeterValues),
            "NotifyChargingLimit" => Ok(CallActionTypeEnum::NotifyChargingLimit),
            "NotifyCustomerInformation" => Ok(CallActionTypeEnum::NotifyCustomerInformation),
            "NotifyDisplayMessages" => Ok(CallActionTypeEnum::NotifyDisplayMessages),
            "NotifyEVChargingNeeds" => Ok(CallActionTypeEnum::NotifyEVChargingNeeds),
            "NotifyEVChargingSchedule" => Ok(CallActionTypeEnum::NotifyEVChargingSchedule),
            "NotifyEvent" => Ok(CallActionTypeEnum::NotifyEvent),
            "NotifyMonitoringReport" => Ok(CallActionTypeEnum::NotifyMonitoringReport),
            "NotifyReport" => Ok(CallActionTypeEnum::NotifyReport),
            "PublishFirmware" => Ok(CallActionTypeEnum::PublishFirmware),
            "PublishFirmwareStatusNotification" => {
                Ok(CallActionTypeEnum::PublishFirmwareStatusNotification)
            }
            "ReportChargingProfiles" => Ok(CallActionTypeEnum::ReportChargingProfiles),
            "RequestStartTransaction" => Ok(CallActionTypeEnum::RequestStartTransaction),
            "RequestStopTransaction" => Ok(CallActionTypeEnum::RequestStopTransaction),
            "ReservationStatusUpdate" => Ok(CallActionTypeEnum::ReservationStatusUpdate),
            "ReserveNow" => Ok(CallActionTypeEnum::ReserveNow),
            "Reset" => Ok(CallActionTypeEnum::Reset),
            "SecurityEventNotification" => Ok(CallActionTypeEnum::SecurityEventNotification),
            "SendLocalList" => Ok(CallActionTypeEnum::SendLocalList),
            "SetChargingProfile" => Ok(CallActionTypeEnum::SetChargingProfile),
            "SetDisplayMessage" => Ok(CallActionTypeEnum::SetDisplayMessage),
            "SetMonitoringBase" => Ok(CallActionTypeEnum::SetMonitoringBase),
            "SetMonitoringLevel" => Ok(CallActionTypeEnum::SetMonitoringLevel),
            "SetNetworkProfile" => Ok(CallActionTypeEnum::SetNetworkProfile),
            "SetVariableMonitoring" => Ok(CallActionTypeEnum::SetVariableMonitoring),
            "SetVariables" => Ok(CallActionTypeEnum::SetVariables),
            "SignCertificate" => Ok(CallActionTypeEnum::SignCertificate),
            "StatusNotification" => Ok(CallActionTypeEnum::StatusNotification),
            "TransactionEvent" => Ok(CallActionTypeEnum::TransactionEvent),
            "TriggerMessage" => Ok(CallActionTypeEnum::TriggerMessage),
            "UnlockConnector" => Ok(CallActionTypeEnum::UnlockConnector),
            "UnpublishFirmware" => Ok(CallActionTypeEnum::UnpublishFirmware),
            "UpdateFirmware" => Ok(CallActionTypeEnum::UpdateFirmware),
            _ => Err(()),
        }
    }
}

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, EnumAsInner)]
#[serde(untagged)]
pub enum CallPayloadTypeEnum {
    AuthorizeRequest(AuthorizeRequest),
    AuthorizeResponse(AuthorizeResponse),
    BootNotificationRequest(BootNotificationRequest),
    BootNotificationResponse(BootNotificationResponse),
    CancelReservationRequest(CancelReservationRequest),
    CancelReservationResponse(CancelReservationResponse),
    CertificateSignedRequest(CertificateSignedRequest),
    CertificateSignedResponse(CertificateSignedResponse),
    ChangeAvailabilityRequest(ChangeAvailabilityRequest),
    ChangeAvailabilityResponse(ChangeAvailabilityResponse),
    ClearCacheRequest(ClearCacheRequest),
    ClearCacheResponse(ClearCacheResponse),
    ClearChargingProfileRequest(ClearChargingProfileRequest),
    ClearChargingProfileResponse(ClearChargingProfileResponse),
    ClearDisplayMessageRequest(ClearDisplayMessageRequest),
    ClearDisplayMessageResponse(ClearDisplayMessageResponse),
    ClearedChargingLimitRequest(ClearedChargingLimitRequest),
    ClearedChargingLimitResponse(ClearedChargingLimitResponse),
    ClearVariableMonitoringRequest(ClearVariableMonitoringRequest),
    ClearVariableMonitoringReponse(ClearVariableMonitoringResponse),
    CostUpdatedRequest(CostUpdatedRequest),
    CostUpdatedResponse(CostUpdatedResponse),
    CustomerInformationRequest(CustomerInformationRequest),
    CustomerInformationResponse(CustomerInformationResponse),
    DataTransferRequest(DataTransferRequest),
    DataTransferResponse(DataTransferResponse),
    DeleteCertificateRequest(DeleteCertificateRequest),
    DeleteCertificateResponse(DeleteCertificateResponse),
    FirmwareStatusNotificationRequest(FirmwareStatusNotificationRequest),
    FirmwareStatusNotificationResponse,
    Get15118EVCertificateRequest(Get15118EVCertificateRequest),
    Get15118EVCertificateResponse(Get15118EVCertificateResponse),
    GetBaseReportRequest(GetBaseReportRequest),
    GetBaseReportResponse(GetBaseReportResponse),
    GetCertificateStatusRequest(GetCertificateStatusRequest),
    GetCertificateStatusResponse(GetCertificateStatusResponse),
    GetChargingProfilesRequest(GetChargingProfilesRequest),
    GetChargingProfilesResponse(GetChargingProfilesResponse),
    GetCompositeScheduleRequest(GetCompositeScheduleRequest),
    GetCompositeScheduleResponse(GetCompositeScheduleResponse),
    GetDisplayMessagesRequest(GetDisplayMessagesRequest),
    GetDisplayMessagesResponse(GetDisplayMessagesResponse),
    GetInstalledCertificateIdsRequest(GetInstalledCertificateIdsRequest),
    GetInstalledCertificateIdsResponse(GetInstalledCertificateIdsResponse),
    GetLocalListVersionRequest(GetLocalListVersionRequest),
    GetLocalListVersionResponse(GetLocalListVersionResponse),
    GetLogRequest(GetLogRequest),
    GetLogResponse(GetLogResponse),
    GetMonitoringReportRequest(GetMonitoringReportRequest),
    GetMonitoringReportResponse(GetMonitoringReportResponse),
    GetReportRequest(GetReportRequest),
    GetReportResponse(GetReportResponse),
    GetTransactionStatusRequest(GetTransactionStatusRequest),
    GetTransactionStatusResponse(GetTransactionStatusResponse),
    GetVariablesRequest(GetVariablesRequest),
    GetVariablesResponse(GetVariablesResponse),
    HeartbeatRequest(HeartbeatRequest),
    HeartbeatResponse(HeartbeatResponse),
    InstallCertificateRequest(InstallCertificateRequest),
    InstallCertificateResponse(InstallCertificateResponse),
    LogStatusNotificationRequest(LogStatusNotificationRequest),
    LogStatusNotificationResponse(LogStatusNotificationResponse),
    MeterValuesRequest(MeterValuesRequest),
    MeterValuesResponse(MeterValuesResponse),
    NotifyChargingLimitRequest(NotifyChargingLimitRequest),
    NotifyChargingLimitResponse(NotifyChargingLimitResponse),
    NotifyCustomerInformationRequest(NotifyCustomerInformationRequest),
    NotifyCustomerInformationResponse(NotifyCustomerInformationResponse),
    NotifyDisplayMessagesRequest(NotifyDisplayMessagesRequest),
    NotifyDisplayMessagesResponse(NotifyDisplayMessagesResponse),
    NotifyEVChargingNeedsRequest(NotifyEVChargingNeedsRequest),
    NotifyEVChargingNeedsResponse(NotifyEVChargingNeedsResponse),
    NotifyEVChargingScheduleRequest(NotifyEVChargingScheduleRequest),
    NotifyEVChargingScheduleResponse(NotifyEVChargingScheduleResponse),
    NotifyEventRequest(NotifyEventRequest),
    NotifyEventResponse(NotifyEventResponse),
    NotifyMonitoringReportRequest(NotifyMonitoringReportRequest),
    NotifyMonitoringReportResponse(NotifyMonitoringReportResponse),
    NotifyReportRequest(NotifyReportRequest),
    NotifyReportResponse(NotifyReportResponse),
    PublishFirmwareRequest(PublishFirmwareRequest),
    PublishFirmwareResponse(PublishFirmwareResponse),
    PublishFirmwareStatusNotificationRequest(PublishFirmwareStatusNotificationRequest),
    PublishFirmwareStatusNotificationResponse(PublishFirmwareStatusNotificationResponse),
    ReportChargingProfilesRequest(ReportChargingProfilesRequest),
    ReportChargingProfilesResponse(ReportChargingProfilesResponse),
    RequestStartTransactionRequest(RequestStartTransactionRequest),
    RequestStartTransactionResponse(RequestStartTransactionResponse),
    RequestStopTransactionRequest(RequestStopTransactionRequest),
    RequestStopTransactionResponse(RequestStopTransactionResponse),
    ReservationStatusUpdateRequest(ReservationStatusUpdateRequest),
    ReservationStatusUpdateResponse(ReservationStatusUpdateResponse),
    ReserveNowRequest(ReserveNowRequest),
    ReserveNowResponse(ReserveNowResponse),
    ResetRequest(ResetRequest),
    ResetResponse(ResetResponse),
    SecurityEventNotificationRequest(SecurityEventNotificationRequest),
    SecurityEventNotificationResponse(SecurityEventNotificationResponse),
    SendLocalListRequest(SendLocalListRequest),
    SendLocalListResponse(SendLocalListResponse),
    SetChargingProfileRequest(SetChargingProfileRequest),
    SetChargingProfileResponse(SetChargingProfileResponse),
    SetDisplayMessageRequest(SetDisplayMessageRequest),
    SetDisplayMessageResponse(SetDisplayMessageResponse),
    SetMonitoringBaseRequest(SetMonitoringBaseRequest),
    SetMonitoringBaseResponse(SetMonitoringBaseResponse),
    SetMonitoringLevelRequest(SetMonitoringLevelRequest),
    SetMonitoringLevelResponse(SetMonitoringLevelResponse),
    SetNetworkProfileRequest(SetNetworkProfileRequest),
    SetNetworkProfileResponse(SetNetworkProfileResponse),
    SetVariableMonitoringRequest(SetVariableMonitoringRequest),
    SetVariableMonitoringResponse(SetVariableMonitoringResponse),
    SetVariablesRequest(SetVariablesRequest),
    SetVariablesResponse(SetVariablesResponse),
    SignCertificateRequest(SignCertificateRequest),
    SignCertificateResponse(SignCertificateResponse),
    StatusNotificationRequest(StatusNotificationRequest),
    StatusNotificationResponse(StatusNotificationResponse),
    TransactionEventRequest(TransactionEventRequest),
    TransactionEventResponse(TransactionEventResponse),
    TriggerMessageRequest(TriggerMessageRequest),
    TriggerMessageResponse(TriggerMessageResponse),
    UnlockConnectorRequest(UnlockConnectorRequest),
    UnlockConnectorResponse(UnlockConnectorResponse),
    UnpublishFirmwareRequest(UnpublishFirmwareRequest),
    UnpublishFirmwareResponse(UnpublishFirmwareResponse),
    UpdateFirmwareRequest(UpdateFirmwareRequest),
    UpdateFirmwareResponse(UpdateFirmwareResponse),
}

impl fmt::Display for CallPayloadTypeEnum {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}
